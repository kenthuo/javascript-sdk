/**
 * kh_identity_verification
 * To run tests transactions on our trial endpoint in postman: [![Run in Postman](https://run.pstmn.io/button.svg)](https://www.getpostman.com/run-collection/a58f438d101278e2bc62) 
 *
 * The version of the OpenAPI document: 1.0.0-alpha.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Address', 'model/AppendedField', 'model/Communication', 'model/Consent', 'model/CountrySubdivision', 'model/DataField', 'model/DataFields', 'model/DataFieldsKYC', 'model/DatasourceField', 'model/DatasourceResult', 'model/DriverLicence', 'model/Location', 'model/LocationAdditionalFields', 'model/NationalId', 'model/NormalizedDatasourceField', 'model/NormalizedDatasourceGroupCountry', 'model/Passport', 'model/PersonInfo', 'model/PersonInfoAdditionalFields', 'model/Record', 'model/RecordRule', 'model/ServiceError', 'model/TransactionRecordResult', 'model/TransactionRecordResultAllOf', 'model/TransactionStatus', 'model/VerifyRequest', 'model/VerifyResult', 'api/ConfigurationApi', 'api/ConnectionApi', 'api/VerificationsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Address'), require('./model/AppendedField'), require('./model/Communication'), require('./model/Consent'), require('./model/CountrySubdivision'), require('./model/DataField'), require('./model/DataFields'), require('./model/DataFieldsKYC'), require('./model/DatasourceField'), require('./model/DatasourceResult'), require('./model/DriverLicence'), require('./model/Location'), require('./model/LocationAdditionalFields'), require('./model/NationalId'), require('./model/NormalizedDatasourceField'), require('./model/NormalizedDatasourceGroupCountry'), require('./model/Passport'), require('./model/PersonInfo'), require('./model/PersonInfoAdditionalFields'), require('./model/Record'), require('./model/RecordRule'), require('./model/ServiceError'), require('./model/TransactionRecordResult'), require('./model/TransactionRecordResultAllOf'), require('./model/TransactionStatus'), require('./model/VerifyRequest'), require('./model/VerifyResult'), require('./api/ConfigurationApi'), require('./api/ConnectionApi'), require('./api/VerificationsApi'));
  }
}(function(ApiClient, Address, AppendedField, Communication, Consent, CountrySubdivision, DataField, DataFields, DataFieldsKYC, DatasourceField, DatasourceResult, DriverLicence, Location, LocationAdditionalFields, NationalId, NormalizedDatasourceField, NormalizedDatasourceGroupCountry, Passport, PersonInfo, PersonInfoAdditionalFields, Record, RecordRule, ServiceError, TransactionRecordResult, TransactionRecordResultAllOf, TransactionStatus, VerifyRequest, VerifyResult, ConfigurationApi, ConnectionApi, VerificationsApi) {
  'use strict';

  /**
   * To_run_tests_transactions_on_our_trial_endpoint_in_postman__Run_in_Postman_https__run_pstmn_io_button_svg_https__www_getpostman_com_run_collection_a58f438d101278e2bc62.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var KhIdentityVerification = require('index'); // See note below*.
   * var xxxSvc = new KhIdentityVerification.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new KhIdentityVerification.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new KhIdentityVerification.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new KhIdentityVerification.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0-alpha.2
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address: Address,
    /**
     * The AppendedField model constructor.
     * @property {module:model/AppendedField}
     */
    AppendedField: AppendedField,
    /**
     * The Communication model constructor.
     * @property {module:model/Communication}
     */
    Communication: Communication,
    /**
     * The Consent model constructor.
     * @property {module:model/Consent}
     */
    Consent: Consent,
    /**
     * The CountrySubdivision model constructor.
     * @property {module:model/CountrySubdivision}
     */
    CountrySubdivision: CountrySubdivision,
    /**
     * The DataField model constructor.
     * @property {module:model/DataField}
     */
    DataField: DataField,
    /**
     * The DataFields model constructor.
     * @property {module:model/DataFields}
     */
    DataFields: DataFields,
    /**
     * The DataFieldsKYC model constructor.
     * @property {module:model/DataFieldsKYC}
     */
    DataFieldsKYC: DataFieldsKYC,
    /**
     * The DatasourceField model constructor.
     * @property {module:model/DatasourceField}
     */
    DatasourceField: DatasourceField,
    /**
     * The DatasourceResult model constructor.
     * @property {module:model/DatasourceResult}
     */
    DatasourceResult: DatasourceResult,
    /**
     * The DriverLicence model constructor.
     * @property {module:model/DriverLicence}
     */
    DriverLicence: DriverLicence,
    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location: Location,
    /**
     * The LocationAdditionalFields model constructor.
     * @property {module:model/LocationAdditionalFields}
     */
    LocationAdditionalFields: LocationAdditionalFields,
    /**
     * The NationalId model constructor.
     * @property {module:model/NationalId}
     */
    NationalId: NationalId,
    /**
     * The NormalizedDatasourceField model constructor.
     * @property {module:model/NormalizedDatasourceField}
     */
    NormalizedDatasourceField: NormalizedDatasourceField,
    /**
     * The NormalizedDatasourceGroupCountry model constructor.
     * @property {module:model/NormalizedDatasourceGroupCountry}
     */
    NormalizedDatasourceGroupCountry: NormalizedDatasourceGroupCountry,
    /**
     * The Passport model constructor.
     * @property {module:model/Passport}
     */
    Passport: Passport,
    /**
     * The PersonInfo model constructor.
     * @property {module:model/PersonInfo}
     */
    PersonInfo: PersonInfo,
    /**
     * The PersonInfoAdditionalFields model constructor.
     * @property {module:model/PersonInfoAdditionalFields}
     */
    PersonInfoAdditionalFields: PersonInfoAdditionalFields,
    /**
     * The Record model constructor.
     * @property {module:model/Record}
     */
    Record: Record,
    /**
     * The RecordRule model constructor.
     * @property {module:model/RecordRule}
     */
    RecordRule: RecordRule,
    /**
     * The ServiceError model constructor.
     * @property {module:model/ServiceError}
     */
    ServiceError: ServiceError,
    /**
     * The TransactionRecordResult model constructor.
     * @property {module:model/TransactionRecordResult}
     */
    TransactionRecordResult: TransactionRecordResult,
    /**
     * The TransactionRecordResultAllOf model constructor.
     * @property {module:model/TransactionRecordResultAllOf}
     */
    TransactionRecordResultAllOf: TransactionRecordResultAllOf,
    /**
     * The TransactionStatus model constructor.
     * @property {module:model/TransactionStatus}
     */
    TransactionStatus: TransactionStatus,
    /**
     * The VerifyRequest model constructor.
     * @property {module:model/VerifyRequest}
     */
    VerifyRequest: VerifyRequest,
    /**
     * The VerifyResult model constructor.
     * @property {module:model/VerifyResult}
     */
    VerifyResult: VerifyResult,
    /**
     * The ConfigurationApi service constructor.
     * @property {module:api/ConfigurationApi}
     */
    ConfigurationApi: ConfigurationApi,
    /**
     * The ConnectionApi service constructor.
     * @property {module:api/ConnectionApi}
     */
    ConnectionApi: ConnectionApi,
    /**
     * The VerificationsApi service constructor.
     * @property {module:api/VerificationsApi}
     */
    VerificationsApi: VerificationsApi
  };

  return exports;
}));
