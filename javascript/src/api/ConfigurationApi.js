/**
 * kh_identity_verification
 * To run tests transactions on our trial endpoint in postman: [![Run in Postman](https://run.pstmn.io/button.svg)](https://www.getpostman.com/run-collection/a58f438d101278e2bc62) 
 *
 * The version of the OpenAPI document: 1.0.0-alpha.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Consent', 'model/CountrySubdivision', 'model/DataFields', 'model/NormalizedDatasourceGroupCountry'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Consent'), require('../model/CountrySubdivision'), require('../model/DataFields'), require('../model/NormalizedDatasourceGroupCountry'));
  } else {
    // Browser globals (root is window)
    if (!root.KhIdentityVerification) {
      root.KhIdentityVerification = {};
    }
    root.KhIdentityVerification.ConfigurationApi = factory(root.KhIdentityVerification.ApiClient, root.KhIdentityVerification.Consent, root.KhIdentityVerification.CountrySubdivision, root.KhIdentityVerification.DataFields, root.KhIdentityVerification.NormalizedDatasourceGroupCountry);
  }
}(this, function(ApiClient, Consent, CountrySubdivision, DataFields, NormalizedDatasourceGroupCountry) {
  'use strict';

  /**
   * Configuration service.
   * @module api/ConfigurationApi
   * @version 1.0.0-alpha.2
   */

  /**
   * Constructs a new ConfigurationApi. 
   * @alias module:api/ConfigurationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getConsents operation.
     * @callback module:api/ConfigurationApi~getConsentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Consents
     * This method retrieves the consents required for the data sources currently configured in your account configuration.   The response for this method contains a collection of string that Verify method's ConsentForDataSources field expects to perform a verification using those data sources.   Failure to provide an element from the string collection will lead to a 1005 service error
     * @param {String} countryCode Country alpha2 code
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {module:api/ConfigurationApi~getConsentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    this.getConsents = function(countryCode, configurationName, callback) {
      var postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getConsents");
      }
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getConsents");
      }

      var pathParams = {
        'countryCode': countryCode,
        'configurationName': configurationName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/configuration/v1/consents/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountryCodes operation.
     * @callback module:api/ConfigurationApi~getCountryCodesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Country Codes
     * This method retrieves all the countries that are available to perform a verification. It returns an array of Alpha2 Country Codes
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {module:api/ConfigurationApi~getCountryCodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    this.getCountryCodes = function(configurationName, callback) {
      var postBody = null;
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getCountryCodes");
      }

      var pathParams = {
        'configurationName': configurationName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ['String'];
      return this.apiClient.callApi(
        '/configuration/v1/countrycodes/{configurationName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCountrySubdivisions operation.
     * @callback module:api/ConfigurationApi~getCountrySubdivisionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CountrySubdivision>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Country Subdivisions
     * Gets the provinces states or other subdivisions for a country, mostly matches ISO 3166-2
     * @param {String} countryCode Country alpha2 code
     * @param {module:api/ConfigurationApi~getCountrySubdivisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CountrySubdivision>}
     */
    this.getCountrySubdivisions = function(countryCode, callback) {
      var postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getCountrySubdivisions");
      }

      var pathParams = {
        'countryCode': countryCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [CountrySubdivision];
      return this.apiClient.callApi(
        '/configuration/v1/countrysubdivisions/{countryCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasources operation.
     * @callback module:api/ConfigurationApi~getDatasourcesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NormalizedDatasourceGroupCountry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Datasources
     * Gets datasource groups configured for your product and country.
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Country alpha2 code
     * @param {module:api/ConfigurationApi~getDatasourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NormalizedDatasourceGroupCountry>}
     */
    this.getDatasources = function(configurationName, countryCode, callback) {
      var postBody = null;
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getDatasources");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getDatasources");
      }

      var pathParams = {
        'configurationName': configurationName,
        'countryCode': countryCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [NormalizedDatasourceGroupCountry];
      return this.apiClient.callApi(
        '/configuration/v1/datasources/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDetailedConsents operation.
     * @callback module:api/ConfigurationApi~getDetailedConsentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Consent>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Detailed Consents
     * This method retrieves details about consents required for data sources currently configured in your account configuration.   The response for this method contains a collection of objects.  Each object contains the Name of the data source, Text outlining what the user is consenting to, and optionally a Url where the user can find more information about how their data will be used.    Failure to provide a Name from the object collection will lead to a 1005 service error.
     * @param {String} countryCode Call CountryCodes to get the countries available to you.
     * @param {String} configurationName Identity Verification
     * @param {module:api/ConfigurationApi~getDetailedConsentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Consent>}
     */
    this.getDetailedConsents = function(countryCode, configurationName, callback) {
      var postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getDetailedConsents");
      }
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getDetailedConsents");
      }

      var pathParams = {
        'countryCode': countryCode,
        'configurationName': configurationName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Consent];
      return this.apiClient.callApi(
        '/configuration/v1/detailedConsents/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFields operation.
     * @callback module:api/ConfigurationApi~getFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Fields
     * Generates json schema for the API, the schema is dynamic based on the country and configuration you are using json-schema.org
     * @param {String} countryCode Country alpha2 code
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {module:api/ConfigurationApi~getFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getFields = function(countryCode, configurationName, callback) {
      var postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getFields");
      }
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getFields");
      }

      var pathParams = {
        'countryCode': countryCode,
        'configurationName': configurationName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/configuration/v1/fields/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendedFields operation.
     * @callback module:api/ConfigurationApi~getRecommendedFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Recommended Fields
     * Generates json schema for the API, the schema is dynamic based on the recommendedFields country and account you are using.  http://json-schema.org/documentation.html
     * @param {String} countryCode Country alpha2 code
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {module:api/ConfigurationApi~getRecommendedFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.getRecommendedFields = function(countryCode, configurationName, callback) {
      var postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getRecommendedFields");
      }
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getRecommendedFields");
      }

      var pathParams = {
        'countryCode': countryCode,
        'configurationName': configurationName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi(
        '/configuration/v1/recommendedfields/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTestEntities operation.
     * @callback module:api/ConfigurationApi~getTestEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataFields>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Test Entities
     * Gets the test entities configured for your product and country.
     * @param {String} configurationName The product configuration. Currently \"Identity Verification\" for all products.
     * @param {String} countryCode Country alpha2 code
     * @param {module:api/ConfigurationApi~getTestEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataFields>}
     */
    this.getTestEntities = function(configurationName, countryCode, callback) {
      var postBody = null;
      // verify the required parameter 'configurationName' is set
      if (configurationName === undefined || configurationName === null) {
        throw new Error("Missing the required parameter 'configurationName' when calling getTestEntities");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getTestEntities");
      }

      var pathParams = {
        'configurationName': configurationName,
        'countryCode': countryCode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKeyAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DataFields];
      return this.apiClient.callApi(
        '/configuration/v1/testentities/{configurationName}/{countryCode}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }
  };

  return exports;
}));
