/**
 * kh_identity_verification
 * To run tests transactions on our trial endpoint in postman: [![Run in Postman](https://run.pstmn.io/button.svg)](https://www.getpostman.com/run-collection/a58f438d101278e2bc62) 
 *
 * The version of the OpenAPI document: 1.0.0-alpha.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/LocationAdditionalFields'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./LocationAdditionalFields'));
  } else {
    // Browser globals (root is window)
    if (!root.KhIdentityVerification) {
      root.KhIdentityVerification = {};
    }
    root.KhIdentityVerification.Location = factory(root.KhIdentityVerification.ApiClient, root.KhIdentityVerification.LocationAdditionalFields);
  }
}(this, function(ApiClient, LocationAdditionalFields) {
  'use strict';



  /**
   * The Location model module.
   * @module model/Location
   * @version 1.0.0-alpha.2
   */

  /**
   * Constructs a new <code>Location</code>.
   * @alias module:model/Location
   * @class
   */
  var exports = function() {
    var _this = this;

  };

  /**
   * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Location} obj Optional instance to populate.
   * @return {module:model/Location} The populated <code>Location</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('BuildingNumber')) {
        obj['BuildingNumber'] = ApiClient.convertToType(data['BuildingNumber'], 'String');
      }
      if (data.hasOwnProperty('BuildingName')) {
        obj['BuildingName'] = ApiClient.convertToType(data['BuildingName'], 'String');
      }
      if (data.hasOwnProperty('UnitNumber')) {
        obj['UnitNumber'] = ApiClient.convertToType(data['UnitNumber'], 'String');
      }
      if (data.hasOwnProperty('StreetName')) {
        obj['StreetName'] = ApiClient.convertToType(data['StreetName'], 'String');
      }
      if (data.hasOwnProperty('StreetType')) {
        obj['StreetType'] = ApiClient.convertToType(data['StreetType'], 'String');
      }
      if (data.hasOwnProperty('City')) {
        obj['City'] = ApiClient.convertToType(data['City'], 'String');
      }
      if (data.hasOwnProperty('Suburb')) {
        obj['Suburb'] = ApiClient.convertToType(data['Suburb'], 'String');
      }
      if (data.hasOwnProperty('County')) {
        obj['County'] = ApiClient.convertToType(data['County'], 'String');
      }
      if (data.hasOwnProperty('StateProvinceCode')) {
        obj['StateProvinceCode'] = ApiClient.convertToType(data['StateProvinceCode'], 'String');
      }
      if (data.hasOwnProperty('Country')) {
        obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
      }
      if (data.hasOwnProperty('PostalCode')) {
        obj['PostalCode'] = ApiClient.convertToType(data['PostalCode'], 'String');
      }
      if (data.hasOwnProperty('POBox')) {
        obj['POBox'] = ApiClient.convertToType(data['POBox'], 'String');
      }
      if (data.hasOwnProperty('AdditionalFields')) {
        obj['AdditionalFields'] = LocationAdditionalFields.constructFromObject(data['AdditionalFields']);
      }
    }
    return obj;
  }

  /**
   * House / Civic / Building number of home address.
   * @member {String} BuildingNumber
   */
  exports.prototype['BuildingNumber'] = undefined;
  /**
   * Name of building of home address.
   * @member {String} BuildingName
   */
  exports.prototype['BuildingName'] = undefined;
  /**
   * Flat/Unit/Apartment number of home address.
   * @member {String} UnitNumber
   */
  exports.prototype['UnitNumber'] = undefined;
  /**
   * Street name of home address.
   * @member {String} StreetName
   */
  exports.prototype['StreetName'] = undefined;
  /**
   * Street type of home address (Typically St, Rd etc).
   * @member {String} StreetType
   */
  exports.prototype['StreetType'] = undefined;
  /**
   * City of home address.
   * @member {String} City
   */
  exports.prototype['City'] = undefined;
  /**
   * Suburb / Subdivision / Municipality of home address.
   * @member {String} Suburb
   */
  exports.prototype['Suburb'] = undefined;
  /**
   * County / District of home address.
   * @member {String} County
   */
  exports.prototype['County'] = undefined;
  /**
   * State of home address. US sources expect 2 characters. Australian sources expect 2 or 3 characters. Can be gotten using the <a class=\"link-to-api\" href=\"#get-country-subdivisions\">Get Country Subdivisions</a> call.
   * @member {String} StateProvinceCode
   */
  exports.prototype['StateProvinceCode'] = undefined;
  /**
   * Country of home address (ISO 3166-1 alpha-2 code).
   * @member {String} Country
   */
  exports.prototype['Country'] = undefined;
  /**
   * ZIP Code or Postal Code of home address.
   * @member {String} PostalCode
   */
  exports.prototype['PostalCode'] = undefined;
  /**
   * Post Office Box.
   * @member {String} POBox
   */
  exports.prototype['POBox'] = undefined;
  /**
   * @member {module:model/LocationAdditionalFields} AdditionalFields
   */
  exports.prototype['AdditionalFields'] = undefined;



  return exports;
}));


